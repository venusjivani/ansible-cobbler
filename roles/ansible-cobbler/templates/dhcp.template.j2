# This file was generated by Ansible for {{ansible_fqdn}}
# Do NOT modify this file by hand!

# ******************************************************************
# Cobbler managed dhcpd.conf file
#
# generated from cobbler dhcp.conf template ($date)
# Do NOT make changes to /etc/dhcpd.conf. Instead, make your changes
# in /etc/cobbler/dhcp.template, as /etc/dhcpd.conf will be
# overwritten.
#
# ******************************************************************

ddns-update-style interim;

allow booting;
allow bootp;

ignore client-updates;
set vendorclass = option vendor-class-identifier;
default-lease-time 7200;
max-lease-time 7200;

option pxe-system-type code 93 = unsigned integer 16;
option classless-routes code 121 = array of unsigned integer 8;

{% for item in subnets %}
subnet {{ item.cobbler_dhcp_subnet }} netmask {{ item.cobbler_dhcp_netmask }} {
    option routers             {{ item.cobbler_dhcp_option_routers }};
    option domain-name-servers {{ item.cobbler_dhcp_option_domain_name_servers }};
    option subnet-mask         {{ item.cobbler_dhcp_option_subnet_mask }};
    range dynamic-bootp        {{ item.cobbler_dhcp_dynamic_bootp_start }} {{ item.cobbler_dhcp_dynamic_bootp_end }};
    default-lease-time         21600;
    max-lease-time             43200;
    next-server                $next_server;
    {% if item.cobbler_dhcp_static_routes is defined %}
    # defines the type of data used to send the routing informations
    option classless-routes {% for static_route in item.cobbler_dhcp_static_routes %} {{ static_route }} {% if loop.last %};{% else %},
                            {% endif %}{% endfor %}
    {% endif %}
#    deny                       unknown-clients;
    class "pxeclients" {
        match if substring (option vendor-class-identifier, 0, 9) = "PXEClient";
        if option pxe-system-type = 00:02 {
            filename "ia64/elilo.efi";
        } else if option pxe-system-type = 00:06 {
            filename "grub/grub-x86.efi";
        } else if option pxe-system-type = 00:07 {
            filename "grub/grub-x86_64.efi";
        } else {
            filename "pxelinux.0";
        }
    }

}
{% endfor %}

#for dhcp_tag in $dhcp_tags.keys():
    ## group could be subnet if your dhcp tags line up with your subnets
    ## or really any valid dhcpd.conf construct ... if you only use the
    ## default dhcp tag in cobbler, the group block can be deleted for a
    ## flat configuration
# group for Cobbler DHCP tag: $dhcp_tag
group {
        #for mac in $dhcp_tags[$dhcp_tag].keys():
            #set iface = $dhcp_tags[$dhcp_tag][$mac]
    host $iface.name {
        hardware ethernet $mac;
        #if $iface.ip_address:
        fixed-address $iface.ip_address;
        #end if
        #if $iface.hostname:
        option host-name "$iface.hostname";
        #end if
        #if $iface.netmask:
        option subnet-mask $iface.netmask;
        #end if
        #if $iface.gateway:
        option routers $iface.gateway;
        #end if
        {% for item in subnets %}
        {% if item.cobbler_dhcp_static_routes is defined %}
        # defines the type of data used to send the routing informations
        option classless-routes {% for static_route in item.cobbler_dhcp_static_routes %} {{ static_route }} {% if loop.last %};{% else %},
                                {% endif %}{% endfor %}
        {% endif %}
        {% endfor %}
        #if $iface.enable_gpxe:
        if exists user-class and option user-class = "gPXE" {
            filename "http://$cobbler_server/cblr/svc/op/gpxe/system/$iface.owner";
        } else if exists user-class and option user-class = "iPXE" {
            filename "http://$cobbler_server/cblr/svc/op/gpxe/system/$iface.owner";
        } else {
            filename "undionly.kpxe";
        }
        #else
        filename "$iface.filename";
        #end if
        ## Cobbler defaults to $next_server, but some users
        ## may like to use $iface.system.server for proxied setups
        next-server $next_server;
        ## next-server $iface.next_server;
    }
        #end for
}
#end for
